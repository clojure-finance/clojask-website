<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://clojure-finance.github.io/clojask-website/" rel="self" type="application/rss+xml"/><title>Clojask</title><link>https://clojure-finance.github.io/clojask-website/</link><description>This site serves as documentation for the dataframe library Clojask written in Clojure.</description><lastBuildDate>Sat, 27 Nov 2021 16:21:18 +0800</lastBuildDate><generator>clj-rss</generator><item><guid>https://clojure-finance.github.io/clojask-website/clojask-website/posts-output/get-started/</guid><link>https://clojure-finance.github.io/clojask-website/clojask-website/posts-output/get-started/</link><title>Get Started</title><description>Getting StartedPlease note that the Onyx library is currently being used in Clojask for its distributed platform.</description><pubDate>Thu, 30 Sep 2021 00:00:00 +0800</pubDate></item><item><guid>https://clojure-finance.github.io/clojask-website/clojask-website/posts-output/examples/</guid><link>https://clojure-finance.github.io/clojask-website/clojask-website/posts-output/examples/</link><title>Examples</title><description>Basic exampleFirst, import the Clojask library</description><pubDate>Wed, 29 Sep 2021 00:00:00 +0800</pubDate></item><item><guid>https://clojure-finance.github.io/clojask-website/clojask-website/posts-output/API/</guid><link>https://clojure-finance.github.io/clojask-website/clojask-website/posts-output/API/</link><title>API Docs</title><description>FeaturesUnlimited size
Theoretically speaking, it supports dataset larger than memory to infinity!All native types
All the datatypes used to store data are native Clojure (or Java) types!From file to file
IO mechanisms are integrated into the dataframe. No need to write your own read-in and output functions!Distributed (coming soon)
Most operations could be distributed to different computers in a clusters. Read about the principle in Onyx.  Lazy operations
Some operations will not be executed immediately. They are stacked in the pipeline which will be optimised for performance when it comes to the final computation step.</description><pubDate>Tue, 28 Sep 2021 00:00:00 +0800</pubDate></item></channel></rss>